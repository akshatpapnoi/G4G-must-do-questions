Given an array A[] of integers, sort the array according to frequency of elements. That is elements that have higher frequency come first. If frequencies of two elements are same, then smaller number comes first.

Input:
The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array.

Output:
For each testcase, in a new line, print each sorted array in a seperate line. For each array its numbers should be seperated by space

Solution:
- Store the elements and frequencies in a map.
- Copy the map in a vector of pairs.
- Sort the vector first by key(ascending order) and then by frequency(descending order).
- Apply stable_sort(), sort() in stl is not stable

Code:

#include <bits/stdc++.h>
using namespace std;

bool fun2(pair<int, int> a, pair<int, int> b){
    return a.second > b.second; 
}

bool fun1(pair<int, int> a, pair<int, int> b){
    return a.first < b.first; 
}

int main() {
	//code
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    map<int, int> m;
	    for(int i=0;i<n;i++){
	        int x;
	        cin>>x;
	        m[x] += 1;
	    }
	    
	    vector<pair<int, int>> v;
	    
	    for(auto i=m.begin(); i!=m.end(); i++){
	        v.push_back(make_pair(i->first, i->second));
	    }
	    
	    sort(v.begin(), v.end(), fun1);
	    stable_sort(v.begin(), v.end(), fun2);
	    
	    for(auto i=v.begin(); i!=v.end(); i++){
	        for(int j=0;j<i->second;j++)
	            cout<<i->first<<" ";
	    }
	    
	    cout<<endl;
	}
	return 0;
}
